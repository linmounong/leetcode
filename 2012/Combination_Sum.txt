class Solution {
public:
    int *count;
    int size;
    vector<vector<int> > ret;
    vector<int> cand;
    
    void bingo() {
        vector<int> v;
        int i, j;
        for (i = 0; i < size; ++i) {
            for (j = count[i]; j > 0; --j) {
                v.push_back(cand[i]);
            }
        }
        ret.push_back(v);
    }
    
    void foo(int idx, int t) {
        if (t == 0) {
            bingo();
            return;
        }
        if (idx == 0) {
            if (t % cand[0] == 0) {
                count[0] = t / cand[0];
                bingo();
                count[0] = 0;
                return;
            } else {
                return;
            }
        }
        while (t >= 0) {
            foo(idx - 1, t);
            t -= cand[idx];
            count[idx]++;
        }
        count[idx] = 0;
        
    }
    
    vector<vector<int> > combinationSum(vector<int> &candidates, int target) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        ret.clear();
        cand = candidates;
        sort(cand.begin(), cand.end());
        cand.erase(unique(cand.begin(), cand.end()), cand.end());
        size = cand.size();
        int t[size];
        for (int i = 0; i < size; ++i) {
            t[i] = 0;
        }
        count = t;
        foo(size - 1, target);
        return ret;
    }
};
