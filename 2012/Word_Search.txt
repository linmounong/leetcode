int m;
int n;
string word;
vector<vector<char> > *board;

bool dfs(int idx, int i, int j, vector<vector<bool> > &used) {
    if (idx >= word.size()) {
        return true;
    }
    if (i < 0 || i >= m || j < 0 || j >= n ||
            used[i][j] || (*board)[i][j] != word[idx]) {
        return false;
    }
    used[i][j] = true;
    if (dfs(idx + 1, i - 1, j, used) ||
            dfs(idx + 1, i + 1, j, used) ||
            dfs(idx + 1, i, j - 1, used) ||
            dfs(idx + 1, i, j + 1, used) ) {
        return true;
    }
    used[i][j] = false;
    return false;
}


class Solution {
public:

    bool exist(vector<vector<char> > &_board, string _word) {
// Start typing your C/C++ solution below
// DO NOT write int main() function
        m = _board.size();
        if (m == 0) {
            return false;
        }
        n = _board[0].size();
        if (n == 0) {
            return false;
        }
        board = &_board;
        word = _word;
        vector<vector<bool> > used(m, vector<bool>(n, false));
        int i, j;
        for (i = 0; i < m; ++i) {
            for (j = 0; j < n; ++j) {
                if (dfs(0, i, j, used)) {
                    return true;
                }
            }
        }
        return false;
    }
};
