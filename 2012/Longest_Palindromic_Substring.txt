class Solution {
	public:
#define MIN(a, b) ((a) < (b)? (a): (b))
		string longestPalindrome(string s) {
			// Start typing your C/C++ solution below
			// DO NOT write int main() function
			int len = s.size();
			if (len == 0)
				return "";
			char *hep = new char[len*2+1];
			int *lens = new int[len*2+1];
			hep[0] = '#';
			for (int i = 0; i < len; ++i) {
				hep[2*i+1] = s[i];
				hep[2*i+2] = '#';
			}
			int anslen = 0;
			int anspos = 0;
			int right = 0;
			int idx = 0;
			for (int i = 0; i <= len*2; ++i) {
				int tmplen;
				if (right > i) {
					tmplen = MIN(right-i, lens[2*idx-i]);
				} else { 
					tmplen = 0;
				}
				while (i-tmplen > 0 && i+tmplen < len*2 &&
						hep[i-tmplen-1] == hep[i+tmplen+1]) {
					++tmplen;
				}
				lens[i] = tmplen;
				if (tmplen > anslen) {
					anslen = tmplen;
					anspos = i;
				}
				if (i+tmplen > right) {
					right = i+tmplen;
					idx = i;
				}
			}
			return s.substr((anspos-anslen)/2, anslen);
		}
};
